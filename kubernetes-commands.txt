mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/$GOOGLE_CLOUD_PROJECT/helloworld:v1

gcloud container clusters get-credentials standard-cluster-1 --region=europe-west1

gcloud container clusters get-credentials standard-cluster-1 --zone=europe-west1-b

kubectl run helloworld-restapi --image=gcr.io/ravi-kubernetes-lab/helloworld:v2 --port=8080

kubectl run helloworld-restapi --image=gcr.io/ravi-kubernetes-lab/helloworld:v2 --port=8080


kubectl get deployments

kubectl get pods

kubectl expose deployment helloworld-restapi --type=LoadBalancer

gcloud auth configure-docker

gcloud container clusters get-credentials standard-cluster-1 --zone=europe-west1-b

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-exchange:v2

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-conversion:v2

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-lab/helloworld_docker:v2
kubectl run helloworld-restapi-1 --image=gcr.io/ravi-kubernetes-lab/helloworld_docker:v2 --port=8080
kubectl expose deployment helloworld-restapi-1 --type=LoadBalancer
https://youtu.be/f0FsaHhU7n0

mvn clean install
docker build -t gcr.io/ravi-kubernetes-lab/helloworld_h2_docker:v1 .
docker push
kubectl run helloworld-restapi-h2-2 --image=gcr.io/ravi-kubernetes-lab/helloworld_h2_docker:v1 --port=8080
kubectl expose deployment helloworld-restapi-h2-2 --type=LoadBalancer
https://youtu.be/aHueapU8RBI

mvn clean install
docker build -t gcr.io/ravi-kubernetes-lab/todo_web_h2_msql_docker:v1 .
kompose convert
kubectl apply -f mysql-database-data-volume-persistentvolumeclaim.yaml,mysql-deployment.yaml,mysql-service.yaml,todo-web-application-deployment.yaml,todo-web-application-service.yaml
https://youtu.be/pYl4VuQXyuo



mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-lab/helloworldh2:v1

kubectl run helloworld-h2-restapi --image=gcr.io/ravi-kubernetes-lab/helloworldh2:v1 --port=8080



http://localhost:8100/currency-converter/from/EUR/to/INR/quantity/100


mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-exchange:v2
kubectl run currency-exchange --image=gcr.io/ravi-kubernetes-tutorial/currency-exchange:v2 --port=8080
kubectl expose deployment currency-exchange --type=LoadBalancer

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-conversion:v2
kubectl run currency-conversion --image=gcr.io/ravi-kubernetes-tutorial/currency-conversion:v2 --port=8080
kubectl expose deployment currency-conversion --type=LoadBalancer

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-lab/currency-conversion-sk:v6

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-lab/currency-exchange-sk:v5

===================
brew install kubernetes-helm
helm init --history-max 200


kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml

================================================================
deploy prometheus server on kubernetes
https://devopscube.com/setup-prometheus-monitoring-on-kubernetes/
https://medium.com/google-cloud/prometheus-and-stackdriver-fb8f7524ece0



export KUBE_NAMESPACE=monitoring
export KUBE_CLUSTER=standard-cluster-1
export GCP_ZONE=europe-west1-b
export GCP_PROJECT=ravi-kubernetes-lab
export DATA_DIR=/prometheus/
export DATA_VOLUME=prometheus-storage-volume
export SIDECAR_IMAGE_TAG=release-0.3.2

=============================================================================================

ConfigMap & Secrets
cd /Users/ravishankar/28minutes/google/01.course/docker-crash-course/03-todo-web-application-mysql
gcloud container clusters get-credentials standard-cluster-1 --zone=europe-west1-b
gcloud auth configure-docker
docker build -t gcr.io/ravi-kubernetes-tutorial/todo_web_h2_msql_docker:v1 .
kubectl apply -f mysql-database-data-volume-persistentvolumeclaim.yaml,mysql-deployment.yaml, mysql-service
#get the loadbalanced mysql ip address and update config map
kubectl apply -f mysql-configmap.yaml, mysql-secret.yaml
kubectl apply -f todo-web-application-deployment-cf.yaml, todo-web-application-service.yaml

Microservices
=============
Option 1:
mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-exchange:v2
kubectl run currency-exchange --image=gcr.io/ravi-kubernetes-tutorial/currency-exchange:v2 --port=8080
kubectl expose deployment currency-exchange --type=LoadBalancer

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-conversion:v2
kubectl run currency-conversion --image=gcr.io/ravi-kubernetes-tutorial/currency-conversion:v2 --port=8080
kubectl expose deployment currency-conversion --type=LoadBalancer

Option 2:
cd /Users/ravishankar/28minutes/google/01.course/docker-crash-course/07-microservices/currency-conversion-service
mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-conversion-sk:v6
cd /Users/ravishankar/28minutes/google/01.course/docker-crash-course/07-microservices/currency-exchange-service
mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-exchange-sk:v5

cd /Users/ravishankar/28minutes/google/01.course/docker-crash-course/07-microservices
kubectl apply -f currency-conversion-deployment.yaml,currency-exchange-deployment.yaml
kubectl apply -f gateway-01.yaml
kubectl apply -f rabc.yaml

Prometheus monitoring
=====================
cd /Users/ravishankar/28minutes/google/01.course/docker-crash-course/07-microservices
ACCOUNT=$(gcloud info --format='value(config.account)')
kubectl create clusterrolebinding owner-cluster-admin-binding \
    --clusterrole cluster-admin \
    --user $ACCOUNT
cd /Users/ravishankar/28minutes/google/01.course/docker-crash-course/07-microservices/currency-conversion-service/prometheus
kubectl create namespace monitoring
kubectl create -f clusterRole.yaml, config-map.yaml
kubectl create -f prom-deployment.yaml, prom-service.yaml




==================================================

helm commands


helm install ./helloworld-ravi --debug --dry-run
helm del --purge microservices
helm install --name microservices ./helloworld-ravi/


==================================================

kubectl label namespace default istio-injection=enabled




https://github.com/GoogleCloudPlatform/gke-istio-telemetry-demo


kubectl create namespace istio-system

curl -L https://git.io/getLatestIstio | ISTIO_VERSION=1.2.2 sh -
cd istio-1.2.2
for i in install/kubernetes/helm/istio-init/files/crd*yaml; do kubectl apply -f $i; done

helm template install/kubernetes/helm/istio --name istio --set global.mtls.enabled=false --set tracing.enabled=true --set kiali.enabled=true --set grafana.enabled=true --namespace istio-system > istio.yaml

kubectl apply -f istio.yaml

kubectl label namespace default istio-injection=enabled


mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-exchange-istio:v2
kubectl run currency-exchange --image=gcr.io/ravi-kubernetes-tutorial/currency-exchange-istio:v2 --port=80
kubectl expose deployment currency-exchange --type=ClusterIP

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/helloworld_docker:v2
kubectl run helloworld-restapi-1 --image=gcr.io/ravi-kubernetes-tutorial/helloworld_docker:v2 -port=8080
kubectl expose deployment helloworld-restapi --type=LoadBalancer


while true; do \
    curl -i http://$EXTERNAL_IP/hello-world -H "Content-type: application/json" \
    --silent -w "Time: %{time_total}s \t Status: %{http_code}\n" -o /dev/null; \
    sleep .8; done


kubectl get secret -n istio-system kiali
kubectl create secret generic kiali -n istio-system --from-literal=username=admin --from-literal=passphrase=admin


===============================================================================
All Istio related commands to install and run

gcloud container clusters get-credentials standard-cluster-1 --zone=europe-west1-b
kubectl create namespace istio-system
curl -L https://git.io/getLatestIstio | ISTIO_VERSION=1.2.2 sh -
for i in install/kubernetes/helm/istio-init/files/crd*yaml; do kubectl apply -f $i; done
helm template install/kubernetes/helm/istio --name istio --set global.mtls.enabled=false --set tracing.enabled=true --set kiali.enabled=true --set grafana.enabled=true --namespace istio-system > istio.yaml
kubectl apply -f istio.yaml
kubectl label namespace default istio-injection=enabled

kubectl get secret -n istio-system kiali
kubectl create secret generic kiali -n istio-system --from-literal=username=admin --from-literal=passphrase=admin

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/helloworld_istio:v1
kubectl apply -f helloworld-v1-restapi-service.yaml
kubectl apply -f http-gateway.yaml
kubectl apply -f hw-virtualservice-external.yaml

kubectl port-forward \
    $(kubectl get pod -n istio-system -l app=kiali \
    -o jsonpath='{.items[0].metadata.name}') \
    -n istio-system 20001
http://localhost:20001

kubectl -n istio-system port-forward \
    $(kubectl -n istio-system get pod -l app=grafana \
    -o jsonpath='{.items[0].metadata.name}') 3000
http://localhost:3000

kubectl port-forward -n istio-system \
    $(kubectl get pod -n istio-system -l app=jaeger \
    -o jsonpath='{.items[0].metadata.name}') 16686
http://localhost:16686

======================================================================================

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/helloworld_istio:v2
kubectl apply -f helloworld-v2-deployment.yaml
kubectl get pods -l app=helloworld-restapi --show-labels
kubectl apply -f hellow-subsets-destinationrule.yaml
kubectl apply -f hellow-subsets-shadowing-vs.yaml


mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-conversion-istio:v3

kubectl get pods -l app=currency-exchange --show-labels

for ((i=1;i<=1000;i++)); do   curl -v --header "Connection: keep-alive" "http://35.195.239.77/hello-world"; done


============================================
mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-conversion-istio:v6

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-exchange-istio:v6

for i in `seq 1 10000`; do curl -s -o /dev/null http://35.240.85.218/currency-conversion/from/EUR/to/INR/quantity/100; done

http://34.77.44.123/currency-conversion/from/EUR/to/INR/quantity/100

for ((i=1;i<=1000;i++)); do   curl -v --header "Connection: keep-alive" "http://34.77.44.123/currency-conversion/from/EUR/to/INR/quantity/100"; done

for ((i=1;i<=1000;i++)); do   curl -v --header "Connection: keep-alive" "http://35.195.239.77/currency-conversion/from/EUR/to/INR/quantity/100"; done



======================================
Istio enabled in GCP
gcloud container clusters get-credentials standard-cluster-1 --zone=europe-west1-b
kubectl label namespace default istio-injection=enabled
sh ./helm-tiller.sh 

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-conversion-istio-trace:v1

mvn compile com.google.cloud.tools:jib-maven-plugin:1.6.1:build -Dimage=gcr.io/ravi-kubernetes-tutorial/currency-exchange-istio-trace:v1

http://35.195.239.77/currency-conversion/from/EUR/to/INR/quantity/100

